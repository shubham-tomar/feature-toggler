package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"fmt"
	"github.com/google/uuid"
	userctx "github.com/shubham-tomar/feature-toggler/graphQl/context"

	"github.com/shubham-tomar/feature-toggler/graphQl/generated"
	"github.com/shubham-tomar/feature-toggler/graphQl/model"
)

// CreateProject is the resolver for the createProject field.
func (r *mutationResolver) CreateProject(ctx context.Context, name string) (*model.Project, error) {
	user := userctx.GetUser(ctx)
	project := &model.Project{
		ID:   uuid.New().String(),
		Name: name,
		Members: []*model.ProjectUser{
			{
				ID:     uuid.New().String(),
				User:   user,
				Role:   model.RoleAdmin,
				Project: nil, // Set later to avoid cycle
			},
		},
	}
	project.Members[0].Project = project

	r.Resolver.projects = append(r.Resolver.projects, project)
	return project, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*model.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, input model.UpdateUserInput) (*model.User, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
}

// UpdateProject is the resolver for the updateProject field.
func (r *mutationResolver) UpdateProject(ctx context.Context, id string, input model.UpdateProjectInput) (*model.Project, error) {
	panic(fmt.Errorf("not implemented: UpdateProject - updateProject"))
}

// DeleteProject is the resolver for the deleteProject field.
func (r *mutationResolver) DeleteProject(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteProject - deleteProject"))
}

// AddProjectMember is the resolver for the addProjectMember field.
func (r *mutationResolver) AddProjectMember(ctx context.Context, input model.AddProjectMemberInput) (*model.ProjectUser, error) {
	panic(fmt.Errorf("not implemented: AddProjectMember - addProjectMember"))
}

// UpdateProjectMember is the resolver for the updateProjectMember field.
func (r *mutationResolver) UpdateProjectMember(ctx context.Context, id string, role model.Role) (*model.ProjectUser, error) {
	panic(fmt.Errorf("not implemented: UpdateProjectMember - updateProjectMember"))
}

// RemoveProjectMember is the resolver for the removeProjectMember field.
func (r *mutationResolver) RemoveProjectMember(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: RemoveProjectMember - removeProjectMember"))
}

// CreateFeatureFlag is the resolver for the createFeatureFlag field.
func (r *mutationResolver) CreateFeatureFlag(ctx context.Context, input model.CreateFeatureFlagInput) (*model.FeatureFlag, error) {
	panic(fmt.Errorf("not implemented: CreateFeatureFlag - createFeatureFlag"))
}

// UpdateFeatureFlag is the resolver for the updateFeatureFlag field.
func (r *mutationResolver) UpdateFeatureFlag(ctx context.Context, id string, input model.UpdateFeatureFlagInput) (*model.FeatureFlag, error) {
	panic(fmt.Errorf("not implemented: UpdateFeatureFlag - updateFeatureFlag"))
}

// DeleteFeatureFlag is the resolver for the deleteFeatureFlag field.
func (r *mutationResolver) DeleteFeatureFlag(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteFeatureFlag - deleteFeatureFlag"))
}

// ToggleFeatureFlag is the resolver for the toggleFeatureFlag field.
func (r *mutationResolver) ToggleFeatureFlag(ctx context.Context, input model.ToggleFeatureFlagInput) (*model.ToggleState, error) {
	panic(fmt.Errorf("not implemented: ToggleFeatureFlag - toggleFeatureFlag"))
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	return userctx.GetUser(ctx), nil
}

// Projects is the resolver for the projects field.
func (r *queryResolver) Projects(ctx context.Context) ([]*model.Project, error) {
	panic(fmt.Errorf("not implemented: Projects - projects"))
}

// Project is the resolver for the project field.
func (r *queryResolver) Project(ctx context.Context, id string) (*model.Project, error) {
	panic(fmt.Errorf("not implemented: Project - project"))
}

// FeatureFlag is the resolver for the feature_flag field.
func (r *queryResolver) FeatureFlag(ctx context.Context, id string) (*model.FeatureFlag, error) {
	panic(fmt.Errorf("not implemented: FeatureFlag - feature_flag"))
}

// FeatureFlagByKey is the resolver for the feature_flag_by_key field.
func (r *queryResolver) FeatureFlagByKey(ctx context.Context, key string) (*model.FeatureFlag, error) {
	panic(fmt.Errorf("not implemented: FeatureFlagByKey - feature_flag_by_key"))
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
