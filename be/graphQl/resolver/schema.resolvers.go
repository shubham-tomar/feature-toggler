package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"fmt"
	"github.com/google/uuid"
	userctx "github.com/shubham-tomar/feature-toggler/graphQl/context"

	"github.com/shubham-tomar/feature-toggler/graphQl/generated"
	"github.com/shubham-tomar/feature-toggler/graphQl/model"
)

// CreateProject is the resolver for the createProject field.
func (r *mutationResolver) CreateProject(ctx context.Context, name string) (*model.Project, error) {
	user := userctx.GetUser(ctx)
	return r.Storage.CreateProject(ctx, user, name)
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*model.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, input model.UpdateUserInput) (*model.User, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
}

// UpdateProject is the resolver for the updateProject field.
func (r *mutationResolver) UpdateProject(ctx context.Context, id string, input model.UpdateProjectInput) (*model.Project, error) {
	panic(fmt.Errorf("not implemented: UpdateProject - updateProject"))
}

// DeleteProject is the resolver for the deleteProject field.
func (r *mutationResolver) DeleteProject(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteProject - deleteProject"))
}

// AddProjectMember is the resolver for the addProjectMember field.
func (r *mutationResolver) AddProjectMember(ctx context.Context, input model.AddProjectMemberInput) (*model.ProjectUser, error) {
	panic(fmt.Errorf("not implemented: AddProjectMember - addProjectMember"))
}

// UpdateProjectMember is the resolver for the updateProjectMember field.
func (r *mutationResolver) UpdateProjectMember(ctx context.Context, id string, role model.Role) (*model.ProjectUser, error) {
	panic(fmt.Errorf("not implemented: UpdateProjectMember - updateProjectMember"))
}

// RemoveProjectMember is the resolver for the removeProjectMember field.
func (r *mutationResolver) RemoveProjectMember(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: RemoveProjectMember - removeProjectMember"))
}

// CreateFeatureFlag is the resolver for the createFeatureFlag field.
func (r *mutationResolver) CreateFeatureFlag(ctx context.Context, input model.CreateFeatureFlagInput) (*model.FeatureFlag, error) {
	user := userctx.GetUser(ctx)
	
	// Create the feature flag
	flag := &model.FeatureFlag{
		ID:          uuid.New().String(),
		Key:         input.Key,
		Name:        input.Name,
		Description: input.Description,
		Project:     &model.Project{ID: input.ProjectID},
		CreatedBy:   user,
	}
	
	// Create toggle states for each environment
	var states []*model.ToggleState
	for _, env := range input.InitialStates {
		state := &model.ToggleState{
			ID:          uuid.New().String(),
			FeatureFlag: flag,
			Environment: env.Environment,
			Enabled:     env.Enabled,
			UpdatedBy:   user,
		}
		states = append(states, state)
	}
	
	// Use storage interface to create feature flag with states
	if err := r.Storage.CreateFeatureFlag(ctx, flag, states); err != nil {
		return nil, fmt.Errorf("failed to create feature flag: %w", err)
	}
	
	// Get complete feature flag with all related data
	flag, err := r.Storage.GetFeatureFlagByID(ctx, flag.ID)
	if err != nil {
		return nil, fmt.Errorf("failed to get feature flag: %w", err)
	}
	
	return flag, nil
}

// UpdateFeatureFlag is the resolver for the updateFeatureFlag field.
func (r *mutationResolver) UpdateFeatureFlag(ctx context.Context, id string, input model.UpdateFeatureFlagInput) (*model.FeatureFlag, error) {
	panic(fmt.Errorf("not implemented: UpdateFeatureFlag - updateFeatureFlag"))
}

// DeleteFeatureFlag is the resolver for the deleteFeatureFlag field.
func (r *mutationResolver) DeleteFeatureFlag(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteFeatureFlag - deleteFeatureFlag"))
}

// ToggleFeatureFlag is the resolver for the toggleFeatureFlag field.
func (r *mutationResolver) ToggleFeatureFlag(ctx context.Context, input model.ToggleFeatureFlagInput) (*model.ToggleState, error) {
	user := userctx.GetUser(ctx)
	
	// Get existing toggle state
	flag, err := r.Storage.GetFeatureFlagByID(ctx, input.FeatureFlagID)
	if err != nil {
		return nil, fmt.Errorf("failed to find feature flag with ID %s: %w", input.FeatureFlagID, err)
	}
	
	// Find state for the environment
	var state *model.ToggleState
	for _, s := range flag.States {
		if s.Environment == input.Environment {
			state = s
			break
		}
	}
	
	if state == nil {
		return nil, fmt.Errorf("no toggle state found for environment %s", input.Environment)
	}
	
	// Update toggle state
	state.Enabled = input.Enabled
	state.UpdatedBy = user
	
	// Save the updated state
	if err := r.Storage.UpdateFeatureFlagState(ctx, state); err != nil {
		return nil, fmt.Errorf("failed to update toggle state: %w", err)
	}
	
	return state, nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	user := userctx.GetUser(ctx)
	
	// Get complete user data from database
	dbUser, err := r.Storage.GetUserByID(ctx, user.ID)
	if err != nil {
		// If user not found in db yet, just return the context user
		return user, nil
	}
	
	return dbUser, nil
}

// Projects is the resolver for the projects field.
func (r *queryResolver) Projects(ctx context.Context) ([]*model.Project, error) {
	return r.Storage.GetProjects(ctx)
}

// Project is the resolver for the project field.
func (r *queryResolver) Project(ctx context.Context, id string) (*model.Project, error) {
	// Use storage to get project by ID
	project, err := r.Storage.GetProjectByID(ctx, id)
	if err != nil {
		return nil, fmt.Errorf("failed to get project: %w", err)
	}
	
	return project, nil
}

// FeatureFlag is the resolver for the feature_flag field.
func (r *queryResolver) FeatureFlag(ctx context.Context, id string) (*model.FeatureFlag, error) {
	// Use storage to get feature flag by ID
	flag, err := r.Storage.GetFeatureFlagByID(ctx, id)
	if err != nil {
		return nil, fmt.Errorf("failed to get feature flag: %w", err)
	}
	
	return flag, nil
}

// FeatureFlagByKey is the resolver for the feature_flag_by_key field.
func (r *queryResolver) FeatureFlagByKey(ctx context.Context, key string) (*model.FeatureFlag, error) {
	// Use storage to get feature flag by key
	flag, err := r.Storage.GetFeatureFlagByKey(ctx, key)
	if err != nil {
		return nil, fmt.Errorf("failed to get feature flag by key: %w", err)
	}
	
	return flag, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
