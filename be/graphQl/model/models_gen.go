// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
	"time"
)

type AddProjectMemberInput struct {
	ProjectID string `json:"projectId"`
	UserID    string `json:"userId"`
	Role      Role   `json:"role"`
}

type CreateFeatureFlagInput struct {
	ProjectID     string               `json:"projectId"`
	Key           string               `json:"key"`
	Name          string               `json:"name"`
	Description   *string              `json:"description,omitempty"`
	InitialStates []*InitialStateInput `json:"initialStates,omitempty"`
}

type CreateProjectInput struct {
	Name string `json:"name"`
}

type CreateUserInput struct {
	Name  string `json:"name"`
	Email string `json:"email"`
}

type FeatureFlag struct {
	ID          string         `json:"id"`
	Key         string         `json:"key"`
	Name        string         `json:"name"`
	Description *string        `json:"description,omitempty"`
	CreatedBy   *User          `json:"created_by"`
	CreatedAt   time.Time      `json:"created_at"`
	UpdatedAt   time.Time      `json:"updated_at"`
	States      []*ToggleState `json:"states"`
	Project     *Project       `json:"project"`
}

type InitialStateInput struct {
	Environment Environment `json:"environment"`
	Enabled     bool        `json:"enabled"`
}

type Mutation struct {
}

type Project struct {
	ID        string         `json:"id"`
	Name      string         `json:"name"`
	CreatedAt time.Time      `json:"created_at"`
	UpdatedAt time.Time      `json:"updated_at"`
	Members   []*ProjectUser `json:"members"`
}

type ProjectUser struct {
	ID      string   `json:"id"`
	User    *User    `json:"user"`
	Project *Project `json:"project"`
	Role    Role     `json:"role"`
}

type Query struct {
}

type ToggleFeatureFlagInput struct {
	FeatureFlagID string      `json:"featureFlagId"`
	Environment   Environment `json:"environment"`
	Enabled       bool        `json:"enabled"`
}

type ToggleState struct {
	ID          string       `json:"id"`
	Enabled     bool         `json:"enabled"`
	Environment Environment  `json:"environment"`
	FeatureFlag *FeatureFlag `json:"feature_flag"`
	UpdatedAt   time.Time    `json:"updated_at"`
	UpdatedBy   *User        `json:"updated_by"`
}

type UpdateFeatureFlagInput struct {
	Name        *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
}

type UpdateProjectInput struct {
	Name *string `json:"name,omitempty"`
}

type UpdateUserInput struct {
	Name  *string `json:"name,omitempty"`
	Email *string `json:"email,omitempty"`
}

type User struct {
	ID                 string         `json:"id"`
	Name               string         `json:"name"`
	Email              string         `json:"email"`
	CreatedAt          time.Time      `json:"created_at"`
	UpdatedAt          time.Time      `json:"updated_at"`
	ProjectMemberships []*ProjectUser `json:"project_memberships"`
}

type Environment string

const (
	EnvironmentProduction  Environment = "PRODUCTION"
	EnvironmentStaging     Environment = "STAGING"
	EnvironmentDevelopment Environment = "DEVELOPMENT"
)

var AllEnvironment = []Environment{
	EnvironmentProduction,
	EnvironmentStaging,
	EnvironmentDevelopment,
}

func (e Environment) IsValid() bool {
	switch e {
	case EnvironmentProduction, EnvironmentStaging, EnvironmentDevelopment:
		return true
	}
	return false
}

func (e Environment) String() string {
	return string(e)
}

func (e *Environment) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Environment(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Environment", str)
	}
	return nil
}

func (e Environment) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *Environment) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e Environment) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type Role string

const (
	RoleAdmin     Role = "ADMIN"
	RoleDeveloper Role = "DEVELOPER"
	RoleViewer    Role = "VIEWER"
)

var AllRole = []Role{
	RoleAdmin,
	RoleDeveloper,
	RoleViewer,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleDeveloper, RoleViewer:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *Role) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e Role) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
